services:
  traefik:
    image: traefik:latest
    container_name: traefik
    restart: unless-stopped
    # env_file:
    #   - .env.traefik
    command:
      # [Optional] Dashboard
      - "--log.level=DEBUG"
      # - "--api.dashboard=true"
      # - "--api.insecure=true"
      # - "--serverstransport.insecureskipverify=true"
      - "--providers.docker=true"
      - "--providers.docker.watch=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.watch=true"
      - "--providers.file.directory=/etc/traefik/conf/"
      # Redirect http -> https
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      # Entrypoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      # - "--certificatesresolvers.production.acme.caserver=https://acme-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.production.acme.tlschallenge=true"
      # - "--certificatesresolvers.production.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.production.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.production.acme.storage=/letsencrypt/acme.json"
      # - "--certificatesresolvers.production.acme.httpchallenge=true"
      # - "--certificatesresolvers.production.acme.httpchallenge.entrypoint=web"

    ports:
      - 80:80
      - 443:443
      # [Optional] Dashboard
      # - 8080:8080
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
      - ./conf/:/etc/traefik/conf/
      # - ./certs/:/etc/traefik/certs/
    networks:
      - traefik-network

  go_server:
    build:
      context: ./backend/
      dockerfile: ./Dockerfile
    volumes:
      - db:/usr/src/app/database
    networks:
      - web
      - traefik-network
    # labels:
    # - traefik.enable=true
    # - traefik.http.routers.chat.entrypoints=web,websecure
    # - traefik.http.routers.chat.rule=Host(`your.domain.here`) # insert domain here
    # - traefik.http.routers.chat.tls=true
    # - traefik.http.routers.chat.tls.certresolver=production
    # - traefik.http.services.chat.loadbalancer.server.port=8080 # what port?

  streamlit:
    build:
      context: ./frontend/
      dockerfile: Dockerfile
    command: streamlit run app.py --server.port=8501 --server.address=0.0.0.0
    # env_file:
    #   - .env.traefik
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    ports:
      - "8501:8501"
    depends_on:
      - go_server
    # volumes:
    #   - "./frontend/.streamlit/:"
    networks:
      - web
      - traefik-network
    labels:
      - traefik.enable=true
      # - traefik.http.routers.streamlit.entrypoints=web,websecure
      - traefik.http.routers.streamlit.entrypoints=websecure
      - traefik.http.routers.streamlit.rule=Host(`${DOMAIN}`)
      - traefik.http.routers.streamlit.tls=true
      - traefik.http.routers.streamlit.tls.certresolver=production
      - traefik.http.services.streamlit.loadbalancer.server.port=8501

      # notifications ðŸ‘€
  # ntfy:
  #   image: binwiederhier/ntfy
  #   container_name: ntfy
  #   command:
  #     - serve
  #   environment:
  #     - TZ=UTC    # optional: set desired timezone
  #   user: UID:GID # optional: replace with your own user/group or uid/gid
  #   volumes:
  #     - /var/cache/ntfy:/var/cache/ntfy
  #     - /etc/ntfy:/etc/ntfy
  #   ports:
  #     - 80:80
  #   healthcheck: # optional: remember to adapt the host:port to your environment
  #       test: ["CMD-SHELL", "wget -q --tries=1 http://localhost:80/v1/health -O - | grep -Eo '\"healthy\"\\s*:\\s*true' || exit 1"]
  #       interval: 60s
  #       timeout: 10s
  #       retries: 3
  #       start_period: 40s
  #   restart: unless-stopped
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.ntfy.tls.certresolver=default"
  #     - "traefik.http.routers.ntfy.entrypoints=web-secure"
  #     - "traefik.http.routers.ntfy.rule=Host(`ntfy.example.org`)"
  #     - "traefik.http.routers.ntfy.tls=true"

networks:
  traefik-network:
    external: false # change to true for more services?
  web:
    external: false

volumes:
  db:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "./backend/database"
